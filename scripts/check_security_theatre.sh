#!/bin/bash
# scripts/check_security_theatre.sh

set -e
echo "üîç D√©marrage du scan de s√©curit√© avanc√©..."

# 1. V√©rification des outils requis
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "‚ùå $1 n'est pas install√©. Installation recommand√©e: $2"
        return 1
    fi
}

check_command "grep" "sudo apt-get install grep"
check_command "find" "sudo apt-get install findutils"

# 2. V√©rification de l'argument --with-audit
RUN_AUDIT=0
if [[ "$1" == "--with-audit" ]]; then
    RUN_AUDIT=1
    check_command "cargo" "https://rustup.rs/"
    
    if ! cargo audit --version &> /dev/null; then
        echo "üõ†Ô∏è Installation de cargo-audit..."
        cargo install cargo-audit --locked
    fi
    
    echo "üîé V√©rification des vuln√©rabilit√©s connues (cargo audit)..."
    cargo audit || {
        echo "‚ö†Ô∏è Des vuln√©rabilit√©s ont √©t√© trouv√©es. Pour les ignorer, ex√©cutez sans --with-audit"
        exit 1
    }
    echo "‚úÖ Aucune vuln√©rabilit√© critique trouv√©e dans les d√©pendances"
fi

# 3. D√©tection des probl√®mes de s√©curit√©
echo "üîç Analyse du code source..."

# a) Mots de passe et cl√©s en dur
echo "\nüîë RECHERCHE DE SECRETS EN DUR"
echo "============================"
SECRET_PATTERNS=(
    "password[[:space:]]*=[[:space:]]*['\"].+['\"]"
    "secret[[:space:]]*=[[:space:]]*['\"].+['\"]"
    "token[[:space:]]*=[[:space:]]*['\"].+['\"]"
    "api[_-]?key[[:space:]]*=[[:space:]]*['\"].+['\"]"
    "private[_-]?key[[:space:]]*=[[:space:]]*['\"].+['\"]"
    "arbiter.*password"
    "encryption.*key"
)

FOUND_SECRETS=0
for pattern in "${SECRET_PATTERNS[@]}"; do
    echo "\nüîé Recherche: $pattern"
    if grep -nHrI --color=always --exclude-dir=target --exclude-dir=.git --exclude=Cargo.lock \
        -E "$pattern" .; then
        FOUND_SECRETS=1
    fi
done

# b) Gestion dangereuse des erreurs
echo "\n‚ö†Ô∏è ERREURS NON G√âR√âES (unwrap/expect/panic)"
echo "================================"
FOUND_UNWRAPS=0
if grep -nHrI --color=always --exclude-dir=target --exclude-dir=.git \
    -E "\\.unwrap\(|\\.expect\(|\\bpanic\(\)" src/; then
    FOUND_UNWRAPS=1
fi

# c) TODOs et FIXMEs critiques
echo "\nüìù TODOS CRITIQUES (SECURITY)"
echo "=========================="
FOUND_TODOS=0
if grep -nHrI --color=always --exclude-dir=target --exclude-dir=.git \
    -E "TODO\\(SECURITY\\)|FIXME\\(SECURITY\\)|XXX\\(SECURITY\\)" .; then
    FOUND_TODOS=1
fi

# d) Fichiers sensibles
echo "\nüîí FICHIERS SENSIBLES TROUV√âS"
echo "========================"
find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*.crt" \) -ls -exec ls -la {} \; 2>/dev/null || true

# e) V√©rification des variables d'environnement
echo "\nüåê VARIABLES D'ENVIRONNEMENT REQUISES"
echo "================================"
REQUIRED_ENV=(
    "DATABASE_URL"
    "DB_ENCRYPTION_KEY"
    "JWT_SECRET"
    "MONERO_RPC_USER"
    "MONERO_RPC_PASS"
)

MISSING_ENV=0
for var in "${REQUIRED_ENV[@]}"; do
    if ! grep -rq "$var" .; then
        echo "‚ùå $var n'est pas r√©f√©renc√© dans le code mais est probablement n√©cessaire"
        MISSING_ENV=1
    fi
done

# R√©sum√©
echo "\nüìä R√âSUM√â DE L'ANALYSE"
echo "=================="

if [ $FOUND_SECRETS -eq 1 ]; then
    echo "‚ùå Des secrets potentiels ont √©t√© trouv√©s dans le code"
else
    echo "‚úÖ Aucun secret d√©tect√© dans le code"
fi

if [ $FOUND_UNWRAPS -eq 1 ]; then
    echo "‚ö†Ô∏è  Des appels potentiellement dangereux (unwrap/expect/panic) d√©tect√©s"
else
    echo "‚úÖ Aucun appel dangereux d√©tect√©"
fi

if [ $FOUND_TODOS -eq 1 ]; then
    echo "üìù Des TODOs critiques ont √©t√© trouv√©s"
else
    echo "‚úÖ Aucun TODO critique trouv√©"
fi

if [ $MISSING_ENV -eq 1 ]; then
    echo "üåê Des variables d'environnement requises pourraient manquer"
else
    echo "‚úÖ Toutes les variables d'environnement requises sont r√©f√©renc√©es"
fi

echo "\n‚úÖ Analyse de s√©curit√© termin√©e"

# Code de sortie bas√© sur les probl√®mes trouv√©s
if [ $FOUND_SECRETS -eq 1 ] || [ $MISSING_ENV -eq 1 ]; then
    exit 1
else
    exit 0
fi
