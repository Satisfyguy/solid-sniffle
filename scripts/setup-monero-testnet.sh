#!/bin/bash

# Script: setup-monero-testnet.sh
# Description: Configure et lance un environnement de testnet Monero complet.
# Usage: ./scripts/setup-monero-testnet.sh [nom_du_wallet]

# --- Couleurs ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m'

# --- Configuration ---
WALLET_NAME=${1:-buyer} # Utilise le premier argument ou "buyer" par d√©faut

# --- V√©rification des d√©pendances ---
echo -e "${CYAN}üîß V√©rification des binaires Monero...${NC}"

missing_binaries=false
for bin in monerod monero-wallet-cli monero-wallet-rpc; do
    if ! command -v $bin &> /dev/null; then
        echo -e "  ${RED}Binaire manquant: $bin. Assurez-vous qu'il est dans votre PATH.${NC}"
        missing_binaries=true
    else
        echo -e "  ${GREEN}Binaire trouv√©: $(command -v $bin)${NC}"
    fi
done

if [ "$missing_binaries" = true ]; then
    echo -e "${RED}Installation Monero incompl√®te. Veuillez installer les outils Monero CLI.${NC}"
    exit 1
fi

# --- 1. Lancer le d√©mon testnet (si pas d√©j√† lanc√©) ---
if ! pgrep -x "monerod" > /dev/null; then
    echo -e "${YELLOW}1Ô∏è‚É£ Lancement du d√©mon testnet...${NC}"
    monerod --testnet --detach
    echo -e "   ${CYAN}Attente de la synchronisation (10s)...${NC}"
    sleep 10
    echo -e "   ${GREEN}‚úÖ D√©mon lanc√©.${NC}"
else
    echo -e "${GREEN}1Ô∏è‚É£ D√©mon d√©j√† lanc√© ‚úÖ${NC}"
fi

# --- 2. Cr√©er le portefeuille si n√©cessaire ---
# monero-wallet-cli cr√©e les fichiers <wallet_name> et <wallet_name>.keys
if [ ! -f "$WALLET_NAME" ]; then
    echo -e "${YELLOW}2Ô∏è‚É£ Cr√©ation du portefeuille testnet: $WALLET_NAME${NC}"
    echo -e "   ${CYAN}(Mot de passe vide pour les tests)${NC}"
    
    # Utilise --generate-new-wallet au lieu de la m√©thode JSON qui est moins standard
    monero-wallet-cli --testnet --generate-new-wallet "$WALLET_NAME" --password "" --mnemonic-language "English" --command exit
    
    if [ -f "$WALLET_NAME" ]; then
        echo -e "   ${GREEN}‚úÖ Portefeuille cr√©√©.${NC}"
    else
        echo -e "   ${RED}‚ùå Erreur lors de la cr√©ation du portefeuille.${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}2Ô∏è‚É£ Le portefeuille existe d√©j√† ‚úÖ${NC}"
fi

# --- 3. Lancer le portefeuille RPC ---
# S'assure qu'aucune autre instance ne tourne pour √©viter les conflits
if pgrep -f "monero-wallet-rpc.*--wallet-file $WALLET_NAME" > /dev/null; then
    echo -e "${GREEN}3Ô∏è‚É£ Le portefeuille RPC pour '$WALLET_NAME' est d√©j√† lanc√© ‚úÖ${NC}"
else
    if pgrep -x "monero-wallet-rpc" > /dev/null; then
        echo -e "${YELLOW}3Ô∏è‚É£ Un autre portefeuille RPC est en cours d'ex√©cution. Fermeture...${NC}"
        pkill -f "monero-wallet-rpc"
        sleep 2
    fi
    echo -e "${YELLOW}3Ô∏è‚É£ Lancement du portefeuille RPC pour: $WALLET_NAME${NC}"
    monero-wallet-rpc \
        --testnet \
        --wallet-file "$WALLET_NAME" \
        --password "" \
        --rpc-bind-ip "127.0.0.1" \
        --rpc-bind-port "18082" \
        --disable-rpc-login \
        --daemon-address "127.0.0.1:28081" \
        --log-level 1 \
        --detach

    echo -e "   ${CYAN}Attente du d√©marrage du RPC (5s)...${NC}"
    sleep 5
fi

# --- 4. Tester la connexion RPC ---
echo -e "${YELLOW}4Ô∏è‚É£ Test de la connexion RPC...${NC}"
rpc_response=$(curl --silent -X POST http://127.0.0.1:18082/json_rpc -H 'Content-Type: application/json' -d '{"jsonrpc":"2.0","id":"0","method":"get_version"}' --connect-timeout 5)

if [[ $rpc_response == *"result"* ]]; then
    version=$(echo "$rpc_response" | jq -r '.result.version')
    echo -e "   ${GREEN}‚úÖ RPC accessible.${NC}"
    echo -e "   ${CYAN}Version: $version${NC}"
else
    echo -e "   ${RED}‚ùå RPC non accessible.${NC}"
    echo -e "   ${RED}Erreur: Assurez-vous que le RPC a bien d√©marr√©.${NC}"
    exit 1
fi

echo
echo -e "${GREEN}‚úÖ Setup Monero Testnet complet!${NC}"
echo
echo -e "${CYAN}üìã R√©sum√©:${NC}"
echo -e "  ${GREEN}D√©mon: testnet @ 127.0.0.1:28081${NC}"
echo -e "  ${GREEN}Portefeuille: $WALLET_NAME (mot de passe vide)${NC}"
echo -e "  ${GREEN}RPC: http://127.0.0.1:18082${NC}"
echo
echo -e "${CYAN}üß™ Prochaine √©tape:${NC}"
echo -e "  ${YELLOW}cargo test --workspace${NC}"