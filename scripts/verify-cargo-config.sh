#!/bin/bash
# Script de v√©rification de la configuration Cargo
# Monero Marketplace - Linux

set -euo pipefail

echo "üîß V√©rification de la configuration Cargo..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que Cargo est install√©
if ! command -v cargo &> /dev/null; then
    log_error "Cargo n'est pas install√©"
    exit 1
fi
log_success "Cargo est install√©"

# V√©rifier la version de Rust
RUST_VERSION=$(rustc --version | cut -d' ' -f2)
log_info "Version Rust: $RUST_VERSION"

# V√©rifier que le fichier de configuration existe
if [[ ! -f ".cargo/config.toml" ]]; then
    log_error "Fichier .cargo/config.toml manquant"
    exit 1
fi
log_success "Configuration Cargo trouv√©e"

# V√©rifier la syntaxe de la configuration
if ! cargo check --quiet 2>/dev/null; then
    log_error "Erreur de syntaxe dans la configuration Cargo"
    cargo check
    exit 1
fi
log_success "Syntaxe de configuration valide"

# V√©rifier les toolchains install√©s
log_info "Toolchains Rust install√©s:"
rustup show

# V√©rifier les targets install√©s
log_info "Targets install√©s:"
rustup target list --installed

# V√©rifier les composants install√©s
log_info "Composants install√©s:"
rustup component list --installed

# Test de compilation rapide
log_info "Test de compilation rapide..."
if cargo check --workspace --quiet; then
    log_success "Compilation de v√©rification r√©ussie"
else
    log_error "Erreur de compilation"
    cargo check --workspace
    exit 1
fi

# V√©rifier Clippy
log_info "Test de Clippy..."
if cargo clippy --workspace --quiet -- -D warnings; then
    log_success "Clippy passe sans erreurs"
else
    log_warning "Clippy a d√©tect√© des probl√®mes"
    cargo clippy --workspace -- -D warnings
fi

# V√©rifier les tests
log_info "Test des tests unitaires..."
if cargo test --workspace --quiet; then
    log_success "Tous les tests passent"
else
    log_warning "Certains tests √©chouent"
    cargo test --workspace
fi

# V√©rifier le formatage
log_info "V√©rification du formatage..."
if cargo fmt --check --quiet; then
    log_success "Code correctement format√©"
else
    log_warning "Code n√©cessite un formatage"
    cargo fmt --check
fi

# R√©sum√©
echo ""
log_success "Configuration Cargo optimis√©e et fonctionnelle !"
log_info "Pr√™t pour le d√©veloppement Monero Marketplace sur Linux"

# Afficher les optimisations activ√©es
echo ""
echo "üöÄ Optimisations activ√©es:"
echo "  ‚Ä¢ Compilation incr√©mentale"
echo "  ‚Ä¢ Optimisations CPU natives"
echo "  ‚Ä¢ LTO pour les builds release"
echo "  ‚Ä¢ Clippy strict (anti-security theatre)"
echo "  ‚Ä¢ Profils optimis√©s (dev/release/test/bench)"
echo "  ‚Ä¢ Variables d'environnement optimis√©es"
