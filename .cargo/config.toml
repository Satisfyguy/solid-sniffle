# Cargo configuration for Linux - Monero Marketplace
# Optimized for development and production

[build]
# Use native CPU optimizations for better performance
rustflags = ["-C", "target-cpu=native"]
# Enable incremental compilation for faster builds
incremental = true
# Use all available CPU cores (auto-detect)
# jobs = 0  # Commented out - Cargo auto-detects

# Clippy configuration for security theatre prevention
[clippy]
all-targets = true
warnings-as-errors = true

# Security theatre prevention - CRITICAL for Monero marketplace
[clippy.deny]
# Production code quality
"clippy::todo" = "No TODO comments in production code"
"clippy::unimplemented" = "No unimplemented! in production code"
"clippy::panic" = "No panic! in production code"
"clippy::unwrap_used" = "No unwrap() without proper error handling"
"clippy::expect_used" = "Use proper error handling instead of expect()"
"clippy::print_stdout" = "Use tracing::info! instead of println!"
"clippy::print_stderr" = "Use tracing::error! instead of eprintln!"
"clippy::dbg_macro" = "No dbg! in production code"

# Security and safety
"clippy::missing_panics_doc" = "Document all panics"
"clippy::missing_errors_doc" = "Document all errors"
"clippy::missing_safety_doc" = "Document all unsafe code"
"clippy::unused_self" = "Remove unused self parameters"
"clippy::needless_pass_by_value" = "Use references instead of owned values"
"clippy::redundant_clone" = "Remove unnecessary clones"

# Performance optimizations
"clippy::large_enum_variant" = "Consider boxing large enum variants"
"clippy::too_many_arguments" = "Consider using a struct for many arguments"
"clippy::type_complexity" = "Simplify complex types"

# Code quality
"clippy::single_match_else" = "Use if let instead of match with single arm"
"clippy::redundant_else" = "Remove redundant else clauses"
"clippy::needless_return" = "Remove unnecessary return statements"

# Monero-specific security
"clippy::cast_lossless" = "Use safe casting methods"
"clippy::cast_possible_truncation" = "Handle potential truncation"
"clippy::float_cmp" = "Use approximate equality for floats"

# Network and I/O security
"clippy::unused_io_amount" = "Handle partial I/O operations"
"clippy::verbose_file_reads" = "Use efficient file reading"

# Development workflow
[target.x86_64-unknown-linux-gnu]
# Use system linker for better integration
linker = "cc"

# Windows targets
[target.x86_64-pc-windows-gnu]
# MinGW linker configuration
linker = "x86_64-w64-mingw32-gcc"

[target.x86_64-pc-windows-msvc]
# MSVC uses default linker (link.exe from Visual Studio)

# Profile configurations
[profile.dev]
# Faster compilation in development
opt-level = 0
debug = true
split-debuginfo = "unpacked"
incremental = true

[profile.release]
# Optimized for production
opt-level = 3
debug = false
lto = true
codegen-units = 1
panic = "abort"
strip = true

# Test profile
[profile.test]
opt-level = 1
debug = true

# Benchmark profile
[profile.bench]
opt-level = 3
debug = false
lto = true
codegen-units = 1

# Environment variables for build
[env]
# Enable backtraces for better error reporting
RUST_BACKTRACE = "1"
# Use all available CPU cores
CARGO_BUILD_JOBS = "0"
# Enable colored output
CARGO_TERM_COLOR = "always"