# CURSOR RULES - Monero Marketplace Tor v2.0
# Updated: 2024-12 (avec suggestions utilisateur)
# Classification: STRICT - Zero Security Theater

project_type: "monero-escrow-marketplace"
deployment_target: "tor-hidden-service-production"
quality_level: "production-ready-only"
security_theater: "FORBIDDEN"

# ============================================
# SECTION 1: AUTOMATION & VERIFICATION
# ============================================

cursor_automation:
  pre_code_generation:
    enabled: true
    
    checks:
      - name: "spec_exists"
        script: |
          # Vérifier que la spec existe
          $functionName = $env:FUNCTION_NAME
          $specPath = "docs/specs/$functionName.md"
          
          if (-not (Test-Path $specPath)) {
              Write-Host " STOP - Spec manquante" -ForegroundColor Red
              Write-Host "Crée d'abord: $specPath" -ForegroundColor Yellow
              Write-Host "Utilise: .\scripts\new-spec.ps1 $functionName" -ForegroundColor Cyan
              throw "Spec manquante pour $functionName"
          }
        blocking: true
      
      - name: "monero_running"
        script: |
          # Vérifier que Monero RPC est accessible
          try {
              $response = Invoke-RestMethod 
                -Uri "http://127.0.0.1:18082/json_rpc" 
                -Method Post 
                -ContentType "application/json" 
                -Body '{"jsonrpc":"2.0","id":"0","method":"get_version"}' 
                -TimeoutSec 5
              
              Write-Host " Monero RPC accessible (v$($response.result.version))" -ForegroundColor Green
          } catch {
              Write-Host " WARNING - Monero RPC non accessible" -ForegroundColor Yellow
              Write-Host "Lance: .\scripts\start-testnet.ps1" -ForegroundColor Cyan
          }
        blocking: false
      
      - name: "cargo_check"
        script: |
          # Vérifier que le projet compile
          $result = cargo check 2>&1
          if ($LASTEXITCODE -ne 0) {
              Write-Host " STOP - Projet ne compile pas" -ForegroundColor Red
              Write-Host $result
              throw "Fix compilation errors first"
          }
        blocking: true
  
  post_code_generation:
    enabled: true
    
    actions:
      - name: "auto_format"
        script: "cargo fmt"
        
      - name: "clippy_check"
        script: |
          cargo clippy -- -D warnings 2>&1
          if ($LASTEXITCODE -ne 0) {
              Write-Host " Clippy warnings detected" -ForegroundColor Yellow
          }
      
      - name: "update_metrics"
        script: ".\scripts\update-metrics.ps1"

# ============================================
# SECTION 2: TEMPLATES PRÊTS À L'EMPLOI
# ============================================

templates:
  spec_template: |
    ## Spec: {function_name}
    
    ### Objectif
    [Décrire en 1 ligne ce que fait cette fonction]
    
    ### Préconditions
    - [ ] monero-wallet-rpc tourne sur localhost:18082
    - [ ] Wallet ouvert et déverrouillé
    - [ ] [Autres préconditions spécifiques]
    
    ### Input
    `
ust
    // Types exacts des paramètres
    param1: Type1,
    param2: Type2,
    `
    
    ### Output
    `
ust
    Result<ReturnType, ErrorType>
    `
    
    ### Erreurs Possibles
    - ErrorType::Variant1 - [Quand ça arrive]
    - ErrorType::Variant2 - [Quand ça arrive]
    
    ### Dépendances
    `	oml
    [dependencies]
    dep1 = "version"
    `
    
    ### Test de Validation (PowerShell)
    `powershell
    # Setup
    .\scripts\start-testnet.ps1
    
    # Test manuel
    Invoke-RestMethod -Uri "http://127.0.0.1:18082/json_rpc" 
      -Method Post -ContentType "application/json" 
      -Body '{"jsonrpc":"2.0","id":"0","method":"{rpc_method}"}'
    
    # Expected output:
    # result : @{...}
    `
    
    ### Estimation
    - Code: XX min
    - Test: XX min
    - Total: XX min
    
    ### Status
    - [ ] Spec validée
    - [ ] Code écrit
    - [ ] Tests passent
    - [ ] Reality check fait

# ============================================
# SECTION 3: MÉTRIQUES DE QUALITÉ
# ============================================

metrics:
  enabled: true
  
  track_per_commit:
    lines_of_code:
      command: |
        $rust = (Get-ChildItem -Recurse -Include *.rs | Get-Content | Measure-Object -Line).Lines
        Write-Host "Rust LOC: $rust"
      
      thresholds:
        warning: 5000
        error: 10000
    
    unwrap_count:
      command: |
        $unwraps = Select-String -Path "*/src/*.rs" -Pattern "\.unwrap\(\)" | Measure-Object | Select-Object -ExpandProperty Count
        Write-Host "Unwraps trouvés: $unwraps"
      
      thresholds:
        warning: 5
        error: 10
    
    todo_count:
      command: |
        $todos = Select-String -Path "*/src/*.rs" -Pattern "TODO|FIXME" | Measure-Object | Select-Object -ExpandProperty Count
        Write-Host "TODOs: $todos"
      
      thresholds:
        warning: 10
        error: 20

# ============================================
# SECTION 4: RÈGLES MONERO SPÉCIFIQUES
# ============================================

monero_rules:
  rpc_calls:
    always_check:
      - "monero-wallet-rpc tourne sur localhost:18082"
      - "Wallet ouvert et déverrouillé"
      - "Daemon testnet synchronisé"
    
    error_handling:
      required: true
      must_handle:
        - "Connection refused (RPC down)"
        - "Wallet locked"
        - "Wallet busy"
        - "Invalid state (déjà multisig)"
        - "Timeout (>30s)"
      
      forbidden:
        - ".unwrap()" # sans message d'erreur
        - ".expect()" # idem
      
      allowed:
        - ".context('message clair')?"
        - "match result { Ok(..) => .., Err(e) => .. }"
  
  multisig_flow:
    strict_order: true
    steps:
      1: "prepare_multisig"
      2: "make_multisig (avec 2 autres infos)"
      3: "export_multisig_info"
      4: "import_multisig_info (2 autres exports)"
      5: "Répéter 3-4 (oui, vraiment)"
      6: "Vérifier is_multisig()"

# ============================================
# SECTION 5: RÈGLES RUST PRODUCTION
# ============================================

rust_rules:
  dependencies:
    allowed_only:
      tokio:
        version: "1.35"
        features: ["full"]
        reason: "Async runtime standard"
      
      reqwest:
        version: "0.11"
        features: ["json"]
        reason: "HTTP client pour Monero RPC"
      
      serde:
        version: "1.0"
        features: ["derive"]
        reason: "Serialization"
      
      serde_json:
        version: "1.0"
        reason: "JSON parsing"
      
      anyhow:
        version: "1.0"
        reason: "Error handling"
      
      thiserror:
        version: "1.0"
        reason: "Custom errors"
  
  error_handling:
    mandatory: true
    pattern: |
      //  TOUJOURS utiliser Result<T, E>
      pub async fn my_function() -> Result<ReturnType, MyError> {
          let value = risky_call()
              .await
              .context("Message clair de ce qui a échoué")?;
          
          Ok(value)
      }
      
      //  JAMAIS
      pub async fn my_function() -> ReturnType {
          let value = risky_call().await.unwrap(); // INTERDIT
          value
      }

# ============================================
# SECTION 6: INTERDICTIONS ABSOLUES
# ============================================

forbidden_patterns:
  code:
    - pattern: "\.unwrap\(\)"
      severity: "ERROR"
      message: "Utilise .context('message')? ou match"
    
    - pattern: "\.expect\(\"[^\"]*\"\)"
      severity: "ERROR"
      message: "Utilise proper error handling"
    
    - pattern: "panic!\("
      severity: "ERROR"
      message: "Retourne Result<T, E> au lieu de panic"
    
    - pattern: "println!\("
      severity: "WARNING"
      message: "Utilise tracing::info! ou tracing::debug!"
  
  comments:
    - pattern: "should work"
      severity: "ERROR"
      message: "Teste-le. Pas de suppositions."
    
    - pattern: "TODO: test"
      severity: "ERROR"
      message: "Écris le test MAINTENANT, pas plus tard"

# ============================================
# SECTION 7: ENFORCEMENT
# ============================================

enforcement:
  level: "STRICT"
  
  on_code_generation:
    checks:
      - "Spec existe (docs/specs/)"
      - " 100 lignes par fonction"
      - "Pas de unwrap/expect"
      - "Error handling présent"
      - "Commentaire HYPOTHÈSES"
    
    block_if_missing: true
  
  on_file_save:
    run:
      - "cargo fmt"
      - "cargo clippy -- -D warnings"
  
  on_commit:
    run:
      - "cargo test"
      - "scripts/test-rpc.ps1"
    
    block_if_fail: true

# ============================================
# SECTION 8: AUTOMATED SECURITY THEATRE PREVENTION
# ============================================

automated_checks:
  enabled: true
  blocking: true
  
  security_theatre_detection:
    script: "scripts/check-security-theatre.ps1"
    exceptions_file: ".security-theatre-ignore"
    patterns:
      - "assert!(true)"
      - "assert!(false)"
      - "// Placeholder"
      - "// TODO"
      - "// FIXME"
      - "// XXX"
      - "// HACK"
      - "should work"
      - "probably works"
      - "assume"
      - "HYPOTHÈSES"
      - "À VALIDER"
      - "ERREUR POSSIBLE"
      - "À IMPLÉMENTER"
      - "unimplemented!()"
      - "todo!()"
      - "panic!()"
      - ".unwrap()"
      - "println!()"
      - "dbg!()"
      - "password = \""
      - "secret = \""
      - "key = \""
      - "token = \""
      - "api_key = \""
      - "private_key = \""
    
    severity:
      critical:
        - "unimplemented!()"
        - "todo!()"
        - "panic!()"
        - ".unwrap()"
        - "password = \""
        - "secret = \""
        - "key = \""
        - "token = \""
        - "api_key = \""
        - "private_key = \""
      
      high:
        - "assert!(true)"
        - "assert!(false)"
        - "// Placeholder"
        - "// TODO"
        - "// FIXME"
        - "// XXX"
        - "// HACK"
        - "should work"
        - "probably works"
        - "assume"
        - "HYPOTHÈSES"
        - "À VALIDER"
        - "ERREUR POSSIBLE"
        - "À IMPLÉMENTER"
        - "println!()"
        - "dbg!()"
      
      medium:
        - "Magic numbers without constants"
        - "Vague error messages"
        - "Unused variables"
        - "Dead code"
    
    exceptions:
      test_files:
        - "**/tests/*.rs"
        - "**/test_*.rs"
        - "**/*_test.rs"
        - "**/integration.rs"
        - "**/integration_test.rs"
      
      cli_tools:
        - "cli/src/test_tool.rs"
      
      documentation:
        - "docs/**/*.md"
        - "**/templates/**"
      
      legitimate_patterns:
        - "expect(\".*\")"  # With descriptive message
        - "println!"        # In CLI tools
        - "// Placeholder"  # In documentation
        - "// TODO"         # In documentation
        - "password = \"test\""  # In test files
        - "secret = \"test\""    # In test files
        - "key = \"test\""       # In test files
        - "0x[0-9a-fA-F]{8,} // [A-Z_]+"  # Cryptographic constants
        - "\\b\\d{4,}\\b // [A-Z_]+"       # Named constants
  
  clippy_configuration:
    enabled: true
    config_file: ".cargo/config.toml"
    deny_patterns:
      - "clippy::todo"
      - "clippy::unimplemented"
      - "clippy::panic"
      - "clippy::unwrap_used"
      - "clippy::print_stdout"
      - "clippy::print_stderr"
      - "clippy::dbg_macro"
      - "clippy::expect_used"
      - "clippy::panic_in_result_fn"
      - "clippy::unnecessary_unwrap"
      - "clippy::unnecessary_result"
      - "clippy::missing_panics_doc"
      - "clippy::missing_errors_doc"
      - "clippy::unused_self"
      - "clippy::needless_pass_by_value"
      - "clippy::needless_borrow"
      - "clippy::redundant_clone"
      - "clippy::useless_conversion"
      - "clippy::cast_lossless"
      - "clippy::cast_possible_truncation"
      - "clippy::cast_possible_wrap"
      - "clippy::cast_sign_loss"
      - "clippy::float_cmp"
      - "clippy::float_cmp_const"
      - "clippy::absurd_extreme_comparisons"
      - "clippy::clone_on_ref_ptr"
      - "clippy::copy_iterator"
      - "clippy::default_trait_access"
      - "clippy::derive_partial_eq_without_eq"
      - "clippy::empty_enum"
      - "clippy::enum_glob_use"
      - "clippy::enum_variant_names"
      - "clippy::eval_order_dependence"
      - "clippy::explicit_auto_deref"
      - "clippy::explicit_iter_loop"
      - "clippy::explicit_into_iter_loop"
      - "clippy::fallible_impl_from"
      - "clippy::filter_map"
      - "clippy::filter_map_next"
      - "clippy::flat_map_option"
      - "clippy::flat_map_result"
      - "clippy::from_iter_instead_of_collect"
      - "clippy::get_unwrap"
      - "clippy::if_let_mutex"
      - "clippy::if_let_some_result"
      - "clippy::if_not_else"
      - "clippy::if_same_then_else"
      - "clippy::if_then_panic"
      - "clippy::if_let_redundant_pattern_matching"
      - "clippy::inefficient_to_string"
      - "clippy::inherent_to_string"
      - "clippy::inherent_to_string_shadow_display"
      - "clippy::int_plus_one"
      - "clippy::integer_arithmetic"
      - "clippy::integer_division"
      - "clippy::into_iter_on_ref"
      - "clippy::is_digit_ascii_radix"
      - "clippy::items_after_statements"
      - "clippy::large_enum_variant"
      - "clippy::large_stack_arrays"
      - "clippy::large_types_passed_by_value"
      - "clippy::len_without_is_empty"
      - "clippy::len_zero"
      - "clippy::let_and_return"
      - "clippy::let_underscore_drop"
      - "clippy::let_underscore_lock"
      - "clippy::let_underscore_must_use"
      - "clippy::linkedlist"
      - "clippy::logic_bug"
      - "clippy::lossy_float_literal"
      - "clippy::macro_use_imports"
      - "clippy::main_recursion"
      - "clippy::manual_async_fn"
      - "clippy::manual_bits"
      - "clippy::manual_clear"
      - "clippy::manual_cpp_builtins"
      - "clippy::manual_enum_glob_use"
      - "clippy::manual_filter_map"
      - "clippy::manual_find_map"
      - "clippy::manual_flatten"
      - "clippy::manual_for_each"
      - "clippy::manual_map"
      - "clippy::manual_memcpy"
      - "clippy::manual_non_exhaustive"
      - "clippy::manual_ok_or"
      - "clippy::manual_range_contains"
      - "clippy::manual_retain"
      - "clippy::manual_saturating_arithmetic"
      - "clippy::manual_skip_while"
      - "clippy::manual_split_once"
      - "clippy::manual_strip"
      - "clippy::manual_swap"
      - "clippy::manual_try_fold"
      - "clippy::manual_unwrap_or"
      - "clippy::map_clone"
      - "clippy::map_collect_result_unit"
      - "clippy::map_entry"
      - "clippy::map_flatten"
      - "clippy::map_unwrap_or"
      - "clippy::match_as_ref"
      - "clippy::match_bool"
      - "clippy::match_like_matches_macro"
      - "clippy::match_on_vec_items"
      - "clippy::match_overlapping_arm"
      - "clippy::match_ref_pats"
      - "clippy::match_same_arms"
      - "clippy::match_single_binding"
      - "clippy::match_wild_err_arm"
      - "clippy::match_wildcard_for_single_variants"
      - "clippy::maybe_infinite_iter"
      - "clippy::mem_forget"
      - "clippy::mem_replace_option_with_none"
      - "clippy::mem_replace_with_default"
      - "clippy::mem_replace_with_uninit"
      - "clippy::min_max"
      - "clippy::misrefactored_assign_op"
      - "clippy::missing_const_for_fn"
      - "clippy::missing_docs_in_private_items"
      - "clippy::missing_errors_doc"
      - "clippy::missing_panics_doc"
      - "clippy::missing_safety_doc"
      - "clippy::mixed_read_write_in_expression"
      - "clippy::module_inception"
      - "clippy::module_name_repetitions"
      - "clippy::modulo_arithmetic"
      - "clippy::multiple_crate_versions"
      - "clippy::multiple_inherent_impl"
      - "clippy::mut_mutex_lock"
      - "clippy::mut_mut"
      - "clippy::mut_reference"
      - "clippy::mutex_atomic"
      - "clippy::mutex_integer"
      - "clippy::naive_bytecount"
      - "clippy::needless_arbitrary_self_type"
      - "clippy::needless_borrow"
      - "clippy::needless_continue"
      - "clippy::needless_doctest_main"
      - "clippy::needless_for_each"
      - "clippy::needless_pass_by_value"
      - "clippy::needless_question_mark"
      - "clippy::needless_range_loop"
      - "clippy::needless_return"
      - "clippy::needless_update"
      - "clippy::neg_cmp_op_on_partial_ord"
      - "clippy::neg_multiply"
      - "clippy::new_ret_no_self"
      - "clippy::new_without_default"
      - "clippy::new_without_default_derive"
      - "clippy::no_effect"
      - "clippy::no_effect_replace"
      - "clippy::non_ascii_literal"
      - "clippy::non_octal_unix_permissions"
      - "clippy::non_send_fields_in_send_ty"
      - "clippy::non_standard_macro_braces"
      - "clippy::nonsensical_open_options"
      - "clippy::not_unsafe_ptr_arg_deref"
      - "clippy::ok_expect"
      - "clippy::op_ref"
      - "clippy::option_as_ref_deref"
      - "clippy::option_env_unwrap"
      - "clippy::option_if_let_else"
      - "clippy::option_map_unit_fn"
      - "clippy::option_map_or_none"
      - "clippy::option_map_or_else"
      - "clippy::option_option"
      - "clippy::or_fun_call"
      - "clippy::out_of_bounds_indexing"
      - "clippy::overflow_check_conditional"
      - "clippy::panic"
      - "clippy::panic_in_result_fn"
      - "clippy::panic_params"
      - "clippy::partialeq_ne_impl"
      - "clippy::path_buf_push_overwrite"
      - "clippy::pattern_type_mismatch"
      - "clippy::peekable_next_if"
      - "clippy::perf"
      - "clippy::possible_missing_comma"
      - "clippy::precedence"
      - "clippy::print_stdout"
      - "clippy::print_stderr"
      - "clippy::ptr_arg"
      - "clippy::ptr_as_ptr"
      - "clippy::ptr_eq"
      - "clippy::ptr_offset_with_cast"
      - "clippy::pub_enum_variant_names"
      - "clippy::question_mark"
      - "clippy::range_minus_one"
      - "clippy::range_plus_one"
      - "clippy::range_step_by_zero"
      - "clippy::range_zip_with_len"
      - "clippy::redundant_closure"
      - "clippy::redundant_closure_call"
      - "clippy::redundant_closure_for_method_calls"
      - "clippy::redundant_else"
      - "clippy::redundant_field_names"
      - "clippy::redundant_guards"
      - "clippy::redundant_pattern"
      - "clippy::redundant_pattern_matching"
      - "clippy::redundant_slicing"
      - "clippy::redundant_static_lifetimes"
      - "clippy::ref_binding_to_reference"
      - "clippy::ref_in_deref"
      - "clippy::ref_option_ref"
      - "clippy::reference"
      - "clippy::regex"
      - "clippy::repeat_once"
      - "clippy::replace_consts"
      - "clippy::result_map_unit_fn"
      - "clippy::result_map_or_else"
      - "clippy::result_map_or_else_unit_fn"
      - "clippy::result_unit_err"
      - "clippy::reverse_range_loop"
      - "clippy::same_functions_in_if_condition"
      - "clippy::same_item_push"
      - "clippy::search_is_some"
      - "clippy::self_assignment"
      - "clippy::self_named_constructors"
      - "clippy::semicolon_if_nothing_returned"
      - "clippy::semicolon_outside_block"
      - "clippy::serde_api_misuse"
      - "clippy::shadow_reuse"
      - "clippy::shadow_same"
      - "clippy::shadow_unrelated"
      - "clippy::should_assert_eq"
      - "clippy::should_implement_trait"
      - "clippy::single_char_add_str"
      - "clippy::single_char_lifetime_names"
      - "clippy::single_char_pattern"
      - "clippy::single_component_path_imports"
      - "clippy::single_match"
      - "clippy::single_match_else"
      - "clippy::size_of_in_element_count"
      - "clippy::skip_while_next"
      - "clippy::slow_vector_initialization"
      - "clippy::stable_sort_primitive"
      - "clippy::str_to_string"
      - "clippy::string_add"
      - "clippy::string_add_assign"
      - "clippy::string_extend_chars"
      - "clippy::string_lit_as_bytes"
      - "clippy::string_slice"
      - "clippy::string_to_string"
      - "clippy::suboptimal_flops"
      - "clippy::suspicious_arithmetic_impl"
      - "clippy::suspicious_assignment_formatting"
      - "clippy::suspicious_auto_trait_impls"
      - "clippy::suspicious_else_formatting"
      - "clippy::suspicious_map"
      - "clippy::suspicious_op_assign_impl"
      - "clippy::suspicious_operation_groupings"
      - "clippy::suspicious_splitn"
      - "clippy::suspicious_unary_op_formatting"
      - "clippy::tabs_in_doc_comments"
      - "clippy::temporary_assignment"
      - "clippy::temporary_cstring_as_ptr"
      - "clippy::todo"
      - "clippy::too_many_arguments"
      - "clippy::too_many_lines"
      - "clippy::toplevel_ref_arg"
      - "clippy::transmute_bytes_to_str"
      - "clippy::transmute_int_to_bool"
      - "clippy::transmute_int_to_char"
      - "clippy::transmute_int_to_float"
      - "clippy::transmute_ptr_to_ptr"
      - "clippy::transmute_ptr_to_ref"
      - "clippy::transmute_undefined_repr"
      - "clippy::transmute_null"
      - "clippy::trivial_regex"
      - "clippy::trivially_copy_pass_by_ref"
      - "clippy::try_err"
      - "clippy::type_complexity"
      - "clippy::type_repetition_in_bounds"
      - "clippy::unimplemented"
      - "clippy::uninit_assumed_init"
      - "clippy::uninit_vec"
      - "clippy::unit_arg"
      - "clippy::unit_cmp"
      - "clippy::unit_return"
      - "clippy::unnecessary_cast"
      - "clippy::unnecessary_filter_map"
      - "clippy::unnecessary_fold"
      - "clippy::unnecessary_lazy_evaluations"
      - "clippy::unnecessary_mut_passed"
      - "clippy::unnecessary_operation"
      - "clippy::unnecessary_self_imports"
      - "clippy::unnecessary_sort_by"
      - "clippy::unnecessary_unwrap"
      - "clippy::unnecessary_wraps"
      - "clippy::unneeded_field_pattern"
      - "clippy::unneeded_wildcard_pattern"
      - "clippy::unreachable"
      - "clippy::unreachable_pub"
      - "clippy::unsafe_derive_deserialize"
      - "clippy::unsafe_removed_from_name"
      - "clippy::unseparated_literal_suffix"
      - "clippy::unstable_as_slice"
      - "clippy::unstable_as_mut_slice"
      - "clippy::unused_async"
      - "clippy::unused_collect"
      - "clippy::unused_io_amount"
      - "clippy::unused_self"
      - "clippy::unused_unit"
      - "clippy::unused_write"
      - "clippy::unwrap_in_result"
      - "clippy::unwrap_used"
      - "clippy::use_debug"
      - "clippy::use_self"
      - "clippy::used_underscore_binding"
      - "clippy::useless_asref"
      - "clippy::useless_let_if_seq"
      - "clippy::useless_transmute"
      - "clippy::useless_vec"
      - "clippy::verbose_file_reads"
      - "clippy::vtable_address_comparisons"
      - "clippy::while_immutable_condition"
      - "clippy::while_let_loop"
      - "clippy::while_let_on_iterator"
      - "clippy::write_literal"
      - "clippy::write_with_newline"
      - "clippy::wrong_self_convention"
      - "clippy::wrong_transmute"
      - "clippy::zero_divided_by_zero"
      - "clippy::zero_prefixed_literal"
      - "clippy::zero_ptr"
      - "clippy::zero_width_space"
    
    allow_patterns:
      - "clippy::expect_used"  # With clear messages
      - "clippy::missing_docs_in_private_items"  # For private items
      - "clippy::too_many_arguments"  # For now
      - "clippy::too_many_lines"  # For now
      - "clippy::type_complexity"  # For now
      - "clippy::module_name_repetitions"  # For now
      - "clippy::single_char_lifetime_names"  # For now
      - "clippy::upper_case_acronyms"  # For now
      - "clippy::needless_doctest_main"  # For now
      - "clippy::non_ascii_literal"  # For now
      - "clippy::tabs_in_doc_comments"  # For now
      - "clippy::unseparated_literal_suffix"  # For now
      - "clippy::zero_prefixed_literal"  # For now
      - "clippy::zero_width_space"  # For now
  
  git_hooks:
    enabled: true
    pre_commit_script: "scripts/pre-commit.ps1"
    security_theatre_check: "scripts/check-security-theatre.ps1"
    
    on_commit:
      - "cargo check"
      - "cargo fmt --check"
      - "cargo clippy -- -D warnings"
      - "cargo test"
      - "scripts/check-security-theatre.ps1"
      - "scripts/test-rpc.ps1"
    
    block_if_fail: true
  
  reporting:
    enabled: true
    output_format: "detailed"
    include_suggestions: true
    include_examples: true
    severity_colors:
      critical: "red"
      high: "yellow"
      medium: "cyan"
      low: "white"
    
    metrics_tracking:
      enabled: true
      track_per_commit: true
      track_trends: true
      alert_thresholds:
        critical_issues: 0
        high_issues: 5
        medium_issues: 10
        total_issues: 15

# ============================================
# SECTION 8: QUICK START
# ============================================

quick_start:
  new_developer:
    steps:
      - step: 1
        name: "Setup Monero"
        command: ".\scripts\setup-monero.ps1"
        
      - step: 2
        name: "Start Testnet"
        command: ".\scripts\start-testnet.ps1"
        
      - step: 3
        name: "Create Spec"
        command: ".\scripts\new-spec.ps1 my_function"
        
      - step: 4
        name: "Write Code"
        note: "Cursor va te guider"
        
      - step: 5
        name: "Reality Check"
        command: ".\scripts\reality-check.ps1 my_function"
        
      - step: 6
        name: "Commit"
        command: ".\scripts\pre-commit.ps1 && git commit"

# ============================================
# SECTION 9: TOR-SPECIFIC REALITY CHECKS
# ============================================

tor_reality_checks:
  enabled: true
  mandatory_for_production: true
  
  trigger:
    on_function_generation: true
    on_network_code: true  # Tout code faisant des requêtes réseau
    on_monero_rpc: true
  
  workflow:
    step_1:
      name: "Détecter code Tor-sensible"
      patterns:
        - "reqwest::"
        - "curl"
        - "http://"
        - "https://"
        - ".onion"
        - "monero-wallet-rpc"
        - "SocksProxy"
      
      on_match:
        message: |
          🧅 CODE TOR-SENSIBLE DÉTECTÉ
          
          Cette fonction fait des appels réseau ou utilise Monero RPC.
          Reality Check Tor OBLIGATOIRE.
    
    step_2:
      name: "Générer Reality Check Tor"
      script: ".\scripts\auto-reality-check-tor.ps1 {function_name}"
      blocking: true
    
    step_3:
      name: "Exécuter Tests Automatiques"
      tests:
        - "Tor daemon running"
        - "IP leak check"
        - "Monero RPC isolation"
        - "Port exposure check"
        - "Logs audit"
      
      on_failure:
        block_commit: true
        message: |
          ⛔ TESTS TOR AUTOMATIQUES ÉCHOUÉS
          
          Fixes requis avant commit.
          Voir: docs/reality-checks/tor-{function_name}-{date}.md
    
    step_4:
      name: "Compléter Tests Manuels"
      checklist:
        - "DNS leak test"
        - "Fingerprinting test"
        - "Hidden service test (si applicable)"
        - "Traffic analysis check"
      
      prompt: |
        ⏸️ TESTS MANUELS REQUIS
        
        Complète les tests manuels dans le reality check.
        Tape "tor tests done" pour continuer.
      
      wait_for: "tor tests done"
    
    step_5:
      name: "Validation Finale"
      script: ".\scripts\validate-reality-check-tor.ps1 {function_name}"
      blocking: true
      
      on_validation_fail:
        prevent_merge: true
        message: "❌ Reality Check Tor invalide - ne pas merger"

  critical_checks:
    # Ces checks DOIVENT passer pour merge en production
    mandatory:
      - name: "No IP leaks"
        test: "curl --socks5-hostname 127.0.0.1:9050 https://check.torproject.org/api/ip"
        expected: '{"IsTor":true}'
        
      - name: "RPC isolated"
        test: "netstat -an | Select-String '18082'"
        expected: "127.0.0.1:18082"
        not_expected: "0.0.0.0:18082"
        
      - name: "No .onion in logs"
        test: "Select-String -Path 'logs/*.log' -Pattern '\\.onion' -CaseSensitive"
        expected: "No matches found"
        
      - name: "No credentials in logs"
        test: "Select-String -Path 'logs/*.log' -Pattern 'password|view_key|spend_key' -CaseSensitive"
        expected: "No matches found"
  
  opsec_guidelines:
    never_log:
      - ".onion addresses"
      - "View keys"
      - "Spend keys"
      - "Passwords"
      - "Real IP addresses"
      - "User-Agent strings"
    
    always_use:
      - "SOCKS5 proxy (127.0.0.1:9050)"
      - "Generic User-Agent"
      - "UTC timezone"
      - "Rounded timestamps"
    
    never_expose:
      - "Monero RPC on 0.0.0.0"
      - "Real identity metadata"
      - "Circuit information"
      - "Node fingerprints"

  threat_model:
    adversaries:
      - name: "ISP / Network Surveillance"
        capabilities:
          - "Monitor all clearnet traffic"
          - "Deep packet inspection"
          - "Timing correlation"
        
        mitigations:
          - "Route all traffic via Tor"
          - "Use bridges if Tor blocked"
          - "Add random delays"
      
      - name: "Exit Node Operator"
        capabilities:
          - "Read unencrypted exit traffic"
          - "MITM attacks"
        
        mitigations:
          - "Use .onion services (no exit)"
          - "HTTPS for clearnet"
          - "Verify certificates"
      
      - name: "Blockchain Analysis"
        capabilities:
          - "Link Monero transactions"
          - "Timing analysis"
          - "Amount correlation"
        
        mitigations:
          - "Use Monero over Tor"
          - "Churn outputs"
          - "Random transaction delays"
      
      - name: "Global Passive Adversary"
        capabilities:
          - "Monitor all internet traffic"
          - "Traffic correlation attacks"
          - "Timing analysis"
        
        mitigations:
          - "Multiple Tor circuits"
          - "Dummy traffic"
          - "Long-lived connections"
          - "Note: Perfect protection impossible"

# ============================================
# SECTION 10: CURSOR ASSISTANT INSTRUCTIONS - TOR MODE
# ============================================

cursor_tor_mode:
  enabled: true
  
  when_generating_network_code:
    always_remind: |
      🧅 TOR MODE ACTIVÉ
      
      Ce code fait des appels réseau. Rappels OPSEC:
      
      1. ✅ Utilise SOCKS5 proxy (127.0.0.1:9050)
      2. ✅ Generic User-Agent
      3. ✅ Handle timeouts (Tor = lent)
      4. ✅ Pas de fallback clearnet
      5. ✅ Log uniquement metadata (pas IPs/domains)
      
      Reality Check Tor sera automatiquement généré après.
  
  when_generating_monero_code:
    always_remind: |
      💰 MONERO + TOR
      
      Rappels critiques:
      
      1. ⛔ RPC bind UNIQUEMENT sur 127.0.0.1
      2. ⛔ JAMAIS log de view/spend keys
      3. ⛔ JAMAIS expose wallet RPC publiquement
      4. ✅ Monero daemon via Tor (si remote)
      5. ✅ Multisig info échangée via Tor .onion
      
      Reality Check Tor + audit automatique seront faits.
  
  forbidden_patterns_tor:
    - pattern: 'reqwest::get\("http[^"]*"\)'
      without: ".socks5_proxy"
      message: "❌ Requête HTTP sans proxy Tor - utilise .socks5_proxy()"
    
    - pattern: "--rpc-bind-ip 0.0.0.0"
      message: "❌ DANGER - RPC exposé publiquement! Utilise 127.0.0.1"
    
    - pattern: 'log.*\.onion'
      message: "❌ Ne log JAMAIS d'adresses .onion"
    
    - pattern: 'log.*view_key|spend_key|password'
      message: "❌ Ne log JAMAIS de credentials"
    
    - pattern: 'std::net::TcpStream::connect'
      without: "via Tor proxy"
      message: "⚠️ Connexion TCP directe - bypass Tor? Utilise SOCKS5 proxy"

  code_templates_tor:
    http_request_via_tor: |
      use reqwest::Proxy;
      
      async fn fetch_via_tor(url: &str) -> Result<String> {
          let proxy = Proxy::all("socks5h://127.0.0.1:9050")
              .context("Échec configuration proxy Tor")?;
          
          let client = reqwest::Client::builder()
              .proxy(proxy)
              .user_agent("Mozilla/5.0 (Windows NT 10.0; rv:102.0) Gecko/20100101 Firefox/102.0")
              .timeout(Duration::from_secs(30))  // Tor = lent
              .build()
              .context("Échec création client")?;
          
          let response = client.get(url)
              .send()
              .await
              .context("Échec requête via Tor")?;
          
          // OPSEC: Ne log PAS l'URL (peut contenir .onion)
          tracing::debug!("Requête Tor réussie");
          
          response.text().await.context("Échec lecture réponse")
      }
    
    monero_rpc_isolated: |
      use std::net::{IpAddr, Ipv4Addr};
      
      async fn start_wallet_rpc() -> Result<Child> {
          let process = Command::new("monero-wallet-rpc")
              .args(&[
                  "--testnet",
                  "--wallet-file", "buyer",
                  "--password", "",
                  "--rpc-bind-ip", "127.0.0.1",  // ⚠️ CRUCIAL - localhost ONLY
                  "--rpc-bind-port", "18082",
                  "--disable-rpc-login",
                  "--daemon-address", "127.0.0.1:28081",  // Daemon local ou via Tor
              ])
              .stdout(Stdio::null())
              .stderr(Stdio::null())
              .spawn()
              .context("Échec lancement wallet RPC")?;
          
          // OPSEC: Vérifier que RPC n'est PAS exposé publiquement
          tokio::time::sleep(Duration::from_secs(5)).await;
          verify_rpc_isolated().await?;
          
          Ok(process)
      }
      
      async fn verify_rpc_isolated() -> Result<()> {
          // Vérifier que port 18082 écoute SEULEMENT sur localhost
          let output = Command::new("netstat")
              .args(&["-an"])
              .output()
              .context("Échec netstat")?;
          
          let stdout = String::from_utf8_lossy(&output.stdout);
          
          if stdout.contains("0.0.0.0:18082") {
              return Err(anyhow::anyhow!(
                  "⚠️ DANGER - RPC exposé publiquement sur 0.0.0.0:18082!"
              ));
          }
          
          if !stdout.contains("127.0.0.1:18082") {
              return Err(anyhow::anyhow!("RPC non détecté sur localhost"));
          }
          
          tracing::info!("✓ RPC correctement isolé sur localhost");
          Ok(())
      }
